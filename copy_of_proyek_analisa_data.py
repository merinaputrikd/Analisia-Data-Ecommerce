# -*- coding: utf-8 -*-
"""Copy of Proyek_Analisa_Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FRIbzXg4xzDPOKkDaKpZ973dTvAfnl7p

**Proyek Analisis Data: Ecommerce Public Data Set**

Nama: Merina Putri kusuma Dewi

Email: merinaputrikd@gmail.com

ID Dicoding:

Menentukan Pertanyaan Bisnis
1. Apa produk terlaris berdasarkan *city* dan *state*?
2. Bagaimana profil demografis *customers*?
3. Bagaimana tingkat kepuasan *customers*?
4. Bagaimana tingkat cicilan *customers*?
5. Berapa tingkat pembayaran menggunakan *credit card* yang dilakukan oleh *customers* pada pembelian produk?
"""

from google.colab import files # type: ignore
uploaded = files.upload()

import os
os.listdir('/content/')

"""**Memanggil semua library**"""



import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""**DATA WRANGLING**

**Gathering Data**
"""

#membuat tabel customers
customers_df = pd.read_csv("/content/customers_dataset.csv")
customers_df.head()

#membuat tabel geolocation
geolocation_df = pd.read_csv("/content/geolocation_dataset.csv")
geolocation_df.head()

#membuat tabel order items
order_items_df = pd.read_csv("/content/order_items_dataset.csv")
order_items_df.head()

#membuat tabel order payments
order_payments_df = pd.read_csv("/content/order_payments_dataset.csv")
order_payments_df.head()

#membuat tabel order reviews
order_reviews_df = pd.read_csv("/content/order_reviews_dataset.csv")
order_reviews_df.head()

# memuat tabel orders
orders_df = pd.read_csv("/content/orders_dataset.csv")
orders_df.head()

#membuat tabel product category name translation
product_category_df = pd.read_csv("/content/product_category_name_translation.csv")
product_category_df.head()

# membuat tabel products
products_df = pd.read_csv("/content/products_dataset.csv")
products_df.head()

#membuat tabel sellers
sellers_df = pd.read_csv("/content/sellers_dataset.csv")
sellers_df.head()

"""**Insight**


1. Dataset: order_items_df, orders_df, products_df, sellers_df
2. Dataset: customers_df, order_items_df, orders_df, products_df, sellers_df
3. order_items_df, orders_df, products_df, sellers_df
4. Dataset: customers_df, order_df, order_payments_df, product_category_df
5. Dataset: customers_df, order_df, order_payments_df, product_category_df

**ASSESING DATA**
"""

#cek tipe data customers
customers_df.info()

#menemukan missing values customers
customers_df.isna().sum()

print("Jumlah duplikasi: ", customers_df.duplicated().sum())

customers_df.describe()

#cek tipe data geolocation
geolocation_df.info()

#menemukan missing value geolocation
geolocation_df.isna().sum()

geolocation_df.describe()

#cek tipe data order items
order_items_df.info()

#menemukan missing values order items
order_items_df.isna().sum()

print("Jumlah duplikasi: ", order_items_df.duplicated().sum())

order_items_df.describe()

#cek tipe data order payments
order_payments_df.info()

#menemukan missing values order payments
order_payments_df.isna().sum()

print("Jumlah duplikasi: ", customers_df.duplicated().sum())

customers_df.describe()

#cek tipe data order reviews
order_reviews_df.info()

#menemukan missing values order reviews
order_reviews_df.isna().sum()

print("Jumlah duplikasi: ", order_reviews_df.duplicated().sum())

order_reviews_df.describe()

#cek tipe data orders
orders_df.info()

#menemukan missing values orders
orders_df.isna().sum()

print("Jumlah duplikasi: ", customers_df.duplicated().sum())

orders_df.describe()

#cek tipe data product translation
product_category_df.info()

#menemukan missing values
product_category_df.isna().sum()

print("Jumlah duplikasi: ", product_category_df.duplicated().sum())

product_category_df.describe()

"""**Products Dataset**"""

products_df.info()

#menemukan missing values products
products_df.isna().sum()

print("Jumlah duplikasi: ", products_df.duplicated().sum())

products_df.describe()

"""**Sellers Dataset**"""

sellers_df.info()

#menemukan missing values sellers
sellers_df.isna().sum()

print("Jumlah duplikasi: ", sellers_df.duplicated().sum())

sellers_df.describe()

"""**Insight**
1. Missing  values pada orders_df dapat mempengaruhi analisis waktu pengiriman pesanan, sehingga perlu dilakukan imputation.
2. Missing values pada products_df dapat menyebabkan analisis terkait kategori produk atau karakteristik produk menjadi tidak lengkap.
3. Duplikasi data pada geolocation_df dapat menyebabkan hasil yang tidak akurat dalam analisis distribusi geografis pelanggan, sehingga perlu dilakukan dropping.

**Cleaning Data**

Data Duplicate
"""

geolocation_df.drop_duplicates(inplace=True)
print("Jumlah duplikasi: ", geolocation_df.duplicated().sum())

"""order reviews"""

order_reviews_df.isna().sum()

order_reviews_dropcol=[ "review_comment_title","review_comment_message"]

order_reviews_df.drop(order_reviews_dropcol, axis= 1, inplace= True)

order_reviews_df.head()

orders_df.isna().sum()

orders_dropcol=[ "order_approved_at",
                 "order_delivered_carrier_date",
                 "order_estimated_delivery_date"]

orders_df.drop(orders_dropcol, axis= 1, inplace= True)

orders_df.head()

#menemukan missing values products
products_df.isna().sum()

import pandas as pd

# Mengisi missing values dengan median untuk beberapa kolom
product_dropcol = ["product_name_lenght",
                    "product_description_lenght",
                    "product_photos_qty",
                    "product_weight_g",
                    "product_length_cm",
                    "product_height_cm",
                    "product_width_cm"]

products_df.drop(product_dropcol, axis= 1, inplace= True)

products_df.head()

"""**Imputation**"""

products_df["product_category_name"].fillna(products_df["product_category_name"].mode()[0], inplace=True)
products_df.info()

"""**Mengatasi kesalahan tipe data**"""

items_datetime = ["shipping_limit_date"]

for col in items_datetime:
  order_items_df[col] = pd.to_datetime(order_items_df[col])

order_items_df.info()

reviews_datetime = ["review_creation_date"]

for col in reviews_datetime:
  order_reviews_df[col] = pd.to_datetime(order_reviews_df[col])

order_reviews_df.info()

"""**Insight**
Cleaning data ini dilakukan agar hasil olah data yang diperoleh nantinya lebih akurat. Cleaning data yang dilakukan yakni berupa penghapusan data duplikat, penghapusan kolom yang tidak digunakan dalam analisis, pengisian nilai kosong, dan pengubahan tipe data datetime.

**Exploraty Data Analysis (EDA)**

Explore All Data
"""

sellers_df = pd.read_csv("/content/sellers_dataset.csv")

all_df = pd.merge(orders_df, order_items_df, on="order_id", how="left")
all_df = pd.merge(all_df, order_payments_df, on="order_id", how="left")
all_df = pd.merge(all_df, order_reviews_df, on="order_id", how="left")
all_df = pd.merge(all_df, customers_df, on="customer_id", how="left")
all_df = pd.merge(all_df, products_df, on="product_id", how="left")
all_df = pd.merge(all_df, product_category_df, on="product_category_name", how="left")

"""**Explore Data order_items_df, orders_df, products_df, sellers_df**

untuk pertanyaan 1

"""

# Merge data order_items_df dengan orders_df
items_products_df = pd.merge(
    left=order_items_df,
    right=orders_df[["order_id", "customer_id"]],
    how="inner",
    left_on="order_id",
    right_on="order_id"
)

# Merge data items_products_df dengan sellers_df
items_products_df = pd.merge(
    left=items_products_df,
    right=sellers_df[["seller_id", "seller_city", "seller_state"]],
    how="inner",
    left_on="seller_id",
    right_on="seller_id"
)

# Merge data items_products_df dengan products_df
items_products_df = pd.merge(
    left=items_products_df,
    right=products_df[["product_id", "product_category_name"]],
    how="inner",
    left_on="product_id",
    right_on="product_id"
)

items_products_df.head()

best_selling_state = items_products_df.groupby(["seller_state", "product_id"]).size().reset_index(name="order_count")
top_selling_per_state = best_selling_state.loc[best_selling_state.groupby("seller_state")["order_count"].idxmax()]

best_selling_city = items_products_df.groupby(["seller_city", "product_id"]).size().reset_index(name="order_count")
top_selling_per_city = best_selling_city.loc[best_selling_city.groupby("seller_city")["order_count"].idxmax()]

"""**Explore Data customers_df & items_products_df**

untuk menjawab pertanyaan 2
"""

# Jumlah customers per city
city_count = customers_df["customer_city"].value_counts().head(10)

# Jumlah customers per state
state_count = customers_df["customer_state"].value_counts()

product_customer_df = items_products_df.groupby(["product_category_name", "customer_id"]).size().reset_index(name="order_count")
category_count = product_customer_df.groupby("product_category_name")["order_count"].count()

"""**Explore data order_reviews_df & items_products_df**

untuk menjawab pertanyaan 3
"""

# Merge data order_reviews_df dengan items_products_df
review_by_category = pd.merge(
    left=order_reviews_df,
    right=items_products_df[["order_id", "product_category_name"]],
    how="inner",
    left_on="order_id",
    right_on="order_id"
)

review_by_category.head()

"""**Explore data order_payments_df & items_products_df**


untuk menjawab pertanyaan 4 dan 5
"""

# Merge data order_payments_df & items_products_df
order_by_installments = pd.merge(
    left=order_payments_df,
    right=items_products_df[["product_category_name", "order_id"]], # Removed the non-existent column and replaced with an existing one.
    how="inner",
    left_on="order_id", # Changed to match the column in the right DataFrame.
    right_on="order_id"
)

order_by_installments.head()

"""**Insight:**

1. Melalui pengelompokkan berdasarkan negara bagian dan kota, dapat diidentifikasi produk yang memiliki penjualan terbanyak. Kita juga dapat melihat variasi penjualan produk di berbagai negara bagian dan kota.
2. Melalui perhitungan jumlah pelanggan per kota, kita dapat mengidentifikasi kota-kota dengan konsentrasi pelanggan tertinggi. Kita juga dapat melihat distribusi pelanggan di berbagai negara bagian melalui status pelanggan dan melihat bagaimana ketertarikan terhadap produk tertentu berdasarkan demografi pelanggan.
3. Melalui perhitungan rata-rata skor ulasan berdasarkan kategori produk, kita dapat mengidentifikasi kategori produk dengan penilaian terbaik.
4. Melalui perhitungan rata-rata payment installments, kita dapat mengidentifikasi kategori produk apa yang paling tinggi dengan lama cicilannya.
5. Melalui perhitungan count payment type, kita dapat mengidentifikasi tipe pembayaran credit yang digunakan untuk 10 kategori produk terlaris.

**VISUALIZATION & EXPLANATORY ANALYSIS**

1. Produk apa yang terlaris jika dilihat dari Product ID?
"""

import seaborn as sns
import matplotlib.pyplot as plt

top_selling_per_state_sorted = top_selling_per_state.sort_values(by="order_count", ascending=False)

top_10_selling_per_state = top_selling_per_state_sorted.head(10)

colors = ["darkblue" if i == top_10_selling_per_state["order_count"].max() else "lightgrey" for i in top_10_selling_per_state["order_count"]]

plt.figure(figsize=(10, 5))
sns.barplot(data=top_10_selling_per_state, x="order_count", y="seller_state", hue="product_id", palette=colors, dodge=False)
plt.title("Best Selling Products by Seller State")
plt.xlabel("Order Count")
plt.ylabel("Seller State")
plt.legend(title="Product ID")
plt.show()

top_selling_per_city_sorted = top_selling_per_city.sort_values(by="order_count", ascending=False)

top_10_selling_per_city = top_selling_per_city_sorted.head(10)

colors_city = ["darkblue" if i == top_10_selling_per_city["order_count"].max() else "lightgrey" for i in top_10_selling_per_city["order_count"]]

plt.figure(figsize=(10, 5))
sns.barplot(data=top_10_selling_per_city, x="order_count", y="seller_city", hue="product_id", palette=colors_city, dodge=False)
plt.title("BestSelling Products by Seller City")
plt.xlabel("Order Count")
plt.ylabel("Seller City")
plt.legend(title="Product ID")
plt.show()

"""**Insight**

Kedua Bar Chart di atas menampilkan sepuluh produk dengan penjualan tertinggi berdasarkan negara bagian dan kota. Produk yang paling banyak terjual di negara-negara bagian tercantum di sebelah grafik, yang menampilkan berbagai ID produk. Dari kedua grafik tersebut, terlihat bahwa negara bagian **São Paulo (SP)** memiliki produk dengan penjualan terbanyak, di mana kotanya adalah **São Paulo.**

2. Bagaimana profil demografis pelanggan?
"""

top_states = state_count.nlargest(10)

colors = ["darkblue" if count == top_states.max() else "lightgrey" for count in top_states]

plt.figure(figsize=(10, 5))
sns.barplot(x=top_states.index, y=top_states.values, palette=colors)
plt.title("Number of Customers by State")
plt.xlabel("State")
plt.ylabel("Number of Customers")
plt.show()

"""**Insight:**

Kedua Bar Chart di atas menampilkan distribusi pelanggan berdasarkan negara bagian dan kategori produk, yang menunjukkan variasi dalam demografi pelanggan, baik berdasarkan wilayah geografis maupun preferensi kategori produk.

Pada grafik pertama, ditunjukkan sepuluh negara bagian dengan jumlah pelanggan terbanyak. Grafik ini menunjukkan bahwa negara bagian dengan jumlah pelanggan tertinggi adalah **São Paulo (SP).** Hal ini menunjukkan bahwa **São Paulo** adalah pasar terbesar berdasarkan jumlah pelanggan.

Pada grafik kedua, ditunjukkan sepuluh kategori produk yang memiliki jumlah pelanggan terbanyak. Kategori produk dengan jumlah pelanggan tertinggi adalah **cama_mesa_banho**, yang mengindikasikan bahwa kategori ini paling populer di kalangan pelanggan.

3. Bagaimana tingkat kepuasan pembeli?
"""

# Menghitung rata-rata skor ulasan per kategori produk
average_review_score = review_by_category.groupby('product_category_name')['review_score'].mean().reset_index()

# Mengubah nama kolom untuk kejelasan
average_review_score.columns = ['product_category_name', 'average_review_score']

# Melihat hasil
print(average_review_score)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Menghitung rata-rata skor ulasan per kategori produk
avg_review_by_category = review_by_category.groupby('product_category_name')['review_score'].mean().reset_index()

# Mengurutkan kategori berdasarkan rata-rata skor ulasan, dan ambil 10 teratas
top_10_categories = avg_review_by_category.sort_values(by='review_score', ascending=False).head(10)

# Set ukuran figure dan tema seaborn
plt.figure(figsize=(10, 6))
sns.set_theme(style="whitegrid")

# Membuat bar plot menggunakan seaborn
sns.barplot(
    x='review_score',
    y='product_category_name',
    data=top_10_categories,
    palette='Blues_r'
)

# Menambahkan judul dan label sumbu
plt.title('Top 10 Kategori Produk Berdasarkan Rata-rata Skor Ulasan', fontsize=14)
plt.xlabel('Rata-rata Skor Ulasan', fontsize=12)
plt.ylabel('Kategori Produk', fontsize=12)

# Menampilkan plot
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 5))
sns.histplot(review_by_category["review_score"], bins=5, kde=True, color="darkblue")
plt.title("Distribution of Purchase Review Scores")
plt.xlabel("Review Scores")
plt.ylabel("Frequency")
plt.xticks(ticks=[1, 2, 3, 4, 5])
plt.xlim(0.5, 5.5)
plt.grid(axis="y")
plt.show()

"""**Insight:**

Bar Chart menunjukkan sepuluh kategori produk dengan rata-rata skor ulasan tertinggi. Grafik ini menunjukkan bahwa produk dalam kategori **CDs, DVDs, Musicais** memiliki rata-rata dengan penilaian yang tertinggi dibandingkan kategori produk lainnya. Ini menunjukkan bahwa pelanggan merasa lebih puas terhadap kategori produk **CDs, DVDs, Musicais.**

Histogram distribusi skor ulasan menggambarkan bagaimana skor ulasan dari pelanggan tersebar dalam skala 1 hingga 5. Mayoritas ulasan terkonsentrasi pada **skor 4 dan 5**, yang menunjukkan bahwa pelanggan merasa puas dengan produk yang mereka beli. Namun, tidak menutup kemungkinan bahwa masih ada yang tidak puas terhadap beberapa produk karena ada beberapa ulasan dengan skor yang lebih rendah.

4. Bagaimana tingkat cicilan customers?
"""

# Menghitung rata-rata cicilan per kategori produk
avg_installments_by_category = order_by_installments.groupby('product_category_name')['payment_installments'].mean().reset_index()

# Mengurutkan kategori berdasarkan rata-rata cicilan, dan ambil 10 teratas
top_10_installments = avg_installments_by_category.sort_values(by='payment_installments', ascending=False).head(10)

# Set ukuran figure dan tema seaborn
plt.figure(figsize=(10, 6))
sns.set_theme(style="whitegrid")

# Membuat bar plot menggunakan seaborn
sns.barplot(
    x='payment_installments',
    y='product_category_name',
    data=top_10_installments,
    palette='Blues_r'
)

# Menambahkan judul dan label sumbu
plt.title('Top 10 Kategori Produk Berdasarkan Rata-rata Cicilan', fontsize=14)
plt.xlabel('Rata-rata Cicilan', fontsize=12)
plt.ylabel('Kategori Produk', fontsize=12)

# Menampilkan plot
plt.tight_layout()
plt.show()

"""**Insight:**
Dapat kita lihat, bahwa rata-rata cicilan **terlama** yang dilakukan oleh *customer* ketika membeli barang adalah kategori **pcs**, yakni selama 6 bulan. Sedangkan, rata-rata cicilan **tercepat** yakni kurang dari 4 bulan yaitu pada kategori produk **construcao_ferramentas_construcao.**

5. Berapa tingkat pembayaran menggunakan credit card yang dilakukan oleh customers pada pembelian produk?
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Filter data hanya untuk tipe pembayaran 'credit_card'
credit_card_payments = order_by_installments[order_by_installments['payment_type'] == 'credit_card']

# Menghitung jumlah pembayaran berdasarkan kategori produk
payment_counts_by_category = credit_card_payments.groupby('product_category_name')['payment_type'].count().reset_index()

# Mengganti nama kolom agar lebih deskriptif
payment_counts_by_category = payment_counts_by_category.rename(columns={'payment_type': 'payment_count'})

# Mengurutkan kategori berdasarkan jumlah pembayaran, dan ambil 10 teratas
top_10_categories_by_payment = payment_counts_by_category.sort_values(by='payment_count', ascending=False).head(10)

# Set ukuran figure dan tema seaborn
plt.figure(figsize=(10, 6))
sns.set_theme(style="whitegrid")

# Membuat bar plot dengan seaborn
sns.barplot(
    x='payment_count',
    y='product_category_name',
    data=top_10_categories_by_payment,
    palette='Blues_r'
)

# Menambahkan judul dan label sumbu
plt.title('Top 10 Kategori Produk Berdasarkan Jumlah Pembayaran Credit Card', fontsize=14)
plt.xlabel('Jumlah Pembayaran Credit Card', fontsize=12)
plt.ylabel('Kategori Produk', fontsize=12)

# Menampilkan plot
plt.tight_layout()
plt.show()

"""**Insight:**

Kategori produk yang terbanyak menggunakan tipe pembayaran *credit card* adalah *cama_mesa_banho* dengan lebih dari 10.000 transaksi, sedangkan kategori produk yang paling sedikit menggunakan tipe pembayaran ini adalah *automotivo dengan sejumlah kurang dari 4000 transaksi.

**Kesimpulan**

Dari analisis yang dilakukan pada beberapa diagram batang, dapat disimpulkan bahwa:

1. **Penjualan Produk**:
   - Negara bagian São Paulo (SP) mencatatkan penjualan tertinggi, dengan kota São Paulo sebagai pusatnya. Ini menunjukkan bahwa São Paulo merupakan pasar utama dalam penjualan produk.

2. **Distribusi Pelanggan**:
   - Negara bagian yang memiliki jumlah pelanggan terbanyak juga adalah São Paulo, menegaskan posisinya sebagai pasar terbesar berdasarkan demografi pelanggan.
   - Kategori produk yang paling diminati oleh pelanggan adalah **cama_mesa_banho**, menandakan preferensi yang jelas dalam pembelian.

3. **Skor Ulasan Produk**:
   - Produk dalam kategori **CDs, DVDs, Musicais** mendapatkan skor ulasan tertinggi, mencerminkan kepuasan pelanggan yang lebih besar terhadap kategori ini.
   - Histogram menunjukkan bahwa mayoritas skor ulasan berkisar pada angka 4 dan 5, menandakan tingkat kepuasan yang baik di kalangan pelanggan. Namun, adanya ulasan dengan skor lebih rendah menunjukkan bahwa masih ada pelanggan yang tidak puas dengan beberapa produk.

4. **Rata-rata Cicilan Pembayaran**:
   - Rata-rata cicilan terlama terjadi pada kategori **pcs**, dengan durasi hingga 6 bulan, sedangkan rata-rata cicilan tercepat kurang dari 4 bulan terdapat pada kategori produk **construcao_ferramentas_construcao**.

5. **Tipe Pembayaran**:
   - Kategori produk **cama_mesa_banho** mendominasi penggunaan metode pembayaran **credit card** dengan lebih dari 10.000 transaksi, sedangkan kategori **automotivo** mencatatkan jumlah transaksi terendah dengan kurang dari 4.000.

Secara keseluruhan, analisis ini memberikan wawasan yang mendalam mengenai pola penjualan, preferensi produk, tingkat kepuasan pelanggan, dan metode pembayaran yang digunakan, yang dapat digunakan untuk strategi pemasaran dan pengembangan produk yang lebih baik di masa mendatang.
"""

all_df.to_csv("all_data_fix.csv", index=False)